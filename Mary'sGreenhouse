#include "vent.h"

unsigned long currentMillis = 0;
unsigned long prevMillis = 0;
const int interva1 = 500;
int debugVal = 1; // Debug: 0 off, 1 on

                            //LCD variables


                            
                            //Selector switch variables
int modePin = 13;

int mode;
String modeString;
int up = 23;
int down = 25;
int upButtonPinStatus;
int downButtonPinStatus;
                            
                            //Vent Variables
int openedSwitchA = 9; //D0
int closedSwitchA = 10; //D5
int openedSwitchB = 11; //D6
int closedSwitchB = 12; //D7

int ventAOpenedPinStatus;
int ventAClosedPinStatus;
int ventBOpenedPinStatus;
int ventBClosedPinStatus;

int overallVentStatus;

String statusInfo;
String vents;
int closed = 0;
int opened = 1;
int intermittent = 2;
int error = 3;
                            //Motor variables
                            
int motorAEnabled = 27;
int motorAopen = 2;
int motorAclose = 3;
int motorBEnabled = 29;
int motorBopen = 4;
int motorBclose = 5;
double pwmSignal = 0;
double pwmInterval = .5;
int pwmMax = 255;                          
                            //Sensor variables
//int windSpeedPin = ;
int luminancePin = A0;
//int barometerPin = ;
//int tempPinOne = ;
//int tempPinTwo = ;

int windSpeed;
int luminance;
int sunlight = 1000;
int mid = 500;
int dark = 0;
String luminanceString;
//int barometer;
int barometerChange;
//int tempOne;
//int tempTwo;
bool safe;
                            //LED variables
int openLED = 6; //D2
int closedLED = 7; //D1
int manualLED = 8;

                            //State machine variables
int ventACurrentState;
int ventBCurrentState;
int motorACurrentState;
int motorBCurrentState;
int modeCurrentState;                 
int upCurrentState;
int downCurrentState;

//Instantiate vents

Vent ventA(openedSwitchA, closedSwitchA, ventAOpenedPinStatus, ventAClosedPinStatus, motorAEnabled, motorAopen, motorAclose, ventACurrentState, upCurrentState, downCurrentState);
Vent ventB(openedSwitchB, closedSwitchB, ventBOpenedPinStatus, ventBClosedPinStatus, motorBEnabled, motorBopen, motorBclose, ventBCurrentState, upCurrentState, downCurrentState);

void setup() {
  ventA.begin();
  ventB.begin();  
  
  pinMode(modePin, INPUT);
   
  pinMode(openLED, OUTPUT);
  pinMode(closedLED, OUTPUT);
  pinMode(manualLED, OUTPUT);

  
  digitalWrite(openLED, LOW);
  digitalWrite(closedLED, LOW);
  digitalWrite(manualLED, LOW);

  Serial.begin(9600);
}

// the loop function runs over and over again forever
void loop() {
  currentMillis = millis();   
  getDebug();

  ventA.getVentStatus();
  ventB.getVentStatus();
   
  checkWeather();
  getMode();
     
  getOverallVentStatus(ventA, ventB);

   //if(safe == true){  
  switch(mode){
  //manual//manual//manual//manual//manual//manual//manual//manual//manual//manual//manual//manual//manual//manual//manual      
    case 0: 
      manuallyControlVents();     
      break;
  
      
  //automatic //automatic //automatic //automatic //automatic //automatic //automatic //automatic //automatic //automatic      
    case 1:
      //automaticallyControlVents();
      break;
  
    default:
      break;
  }
}

void checkWeather(){
  luminance = analogRead(luminancePin);
  luminance = 1023 - luminance;
  if(luminance >= sunlight){
    luminanceString = "sunlight";
  }
  if(luminance >= mid && luminance < sunlight){
    luminanceString = "mid";
  }
  if(luminance <mid){
    luminanceString = "dark";
  }
  
  if(windSpeed <= 15 || barometerChange ){ //-2hPa/3h
    safe = true;
  }
  else{
    safe = false;
  }
}

void getMode(){
  if(digitalRead(modePin) == 0){
    mode = 0; //manual
    modeString = "manual";
    digitalWrite(manualLED, HIGH);     
  }
  else{
    mode = 1; //automatic
    modeString = "automatic";
    digitalWrite(manualLED, LOW); 
  }
}

int getOverallVentStatus(Vent ventAStatus, Vent ventBStatus){
  if(ventA.getVentStatus() == 0 && ventB.getVentStatus() == 0){
    overallVentStatus = 0;
    digitalWrite(closedLED, HIGH);
    digitalWrite(openLED, LOW);     
    vents = "closed";    
  }
  if(ventA.getVentStatus() == 1 && ventB.getVentStatus() == 1){
    overallVentStatus = 1;
    digitalWrite(closedLED, LOW);
    digitalWrite(openLED, HIGH);
    vents = "opened";     
  }
  if(ventA.getVentStatus() == 2 || ventB.getVentStatus() == 2){
    overallVentStatus = 2;
    digitalWrite(closedLED, LOW);
    digitalWrite(openLED, LOW);
    vents = "intermittent";    
  }
  if((ventA.getVentStatus() == 1 && ventB.getVentStatus() == 0) || (ventA.getVentStatus() == 0 && ventB.getVentStatus() == 1)){
    overallVentStatus = 3;
    digitalWrite(closedLED, LOW);
    digitalWrite(openLED, LOW);
    vents = "error";   
    // Blink all LEDs every 3 seconds    
  }
  return overallVentStatus;
}

void manuallyControlVents(){ 
  upButtonPinStatus = digitalRead(up);
  downButtonPinStatus = digitalRead(down);
      
//Up button              
  if(upButtonPinStatus == 1 && downButtonPinStatus == 0){
    if(ventA.getVentStatus() == closed || ventA.getVentStatus() == intermittent){
      if(pwmSignal <= pwmMax){
        pwmSignal = pwmSignal + pwmInterval;
        ventA.openVent(pwmSignal);
      }
    }
    else{
      ventA.stopVent();
    }
    
    if(ventB.getVentStatus() == closed || ventB.getVentStatus() == intermittent){
      if(pwmSignal <= pwmMax){
        pwmSignal = pwmSignal + pwmInterval;
        ventB.openVent(pwmSignal);
      }
    }
    else{
      ventB.stopVent();
    }
  }

//Down button          
  if(downButtonPinStatus == 1 && upButtonPinStatus == 0){
    if(ventA.getVentStatus() == opened || ventA.getVentStatus() == intermittent){
      if(pwmSignal <= pwmMax){
        pwmSignal = pwmSignal + pwmInterval;                
        ventA.closeVent(pwmSignal);
      }
    }
    else{
      ventA.stopVent();
    }
    if(ventB.getVentStatus() == opened || ventB.getVentStatus() == intermittent){
      if(pwmSignal <= pwmMax){
        pwmSignal = pwmSignal + pwmInterval;                
        ventB.closeVent(pwmSignal);
      }
    }
    else{
      ventB.stopVent();
    }
  }
  
  if(downButtonPinStatus == 0 && upButtonPinStatus == 0){
    ventA.stopVent();
    ventB.stopVent();
    pwmSignal = 0;
  } 
}







void getDebug(){
  if(debugVal == 1){
    Serial.print("MODE: ");Serial.println(modeString);
    Serial.print("Luminance: ");Serial.println(luminance);    
    Serial.print("Motor A: "); Serial.println(digitalRead(motorAEnabled));
    Serial.print("Motor B: "); Serial.println(digitalRead(motorBEnabled));    
    Serial.print("Up button status: "); Serial.println(upButtonPinStatus);
    Serial.print("Down button status: "); Serial.println(downButtonPinStatus);    
    Serial.print("Vent A: "); Serial.println(ventA.getVentStatus());
    Serial.print("Vent B: "); Serial.println(ventB.getVentStatus());  
    Serial.print("Overall vent status: "); Serial.println(overallVentStatus);
    Serial.print("Vent Status: ");    Serial.println(vents);
  }
}
